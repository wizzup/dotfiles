# vim: ft=sh cms=#\ %s
# ~/.bashrc

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

#
# List files
#
# list with color by default
alias ls='ls --color=auto'
# list links
alias ll='find . -maxdepth 1 -type l | xargs -i ls -al {} | column -t'
# list executable
alias lx='find . -maxdepth 1 -type f -executable'
# list hidden
alias lh='ls -al | grep " \."'

## youtube download add queue entry to YTTODO file
function yttd {
  [[ ! -e YTTODO ]] && \
    printf "#! /usr/bin/env nix-shell\n#! nix-shell -i bash -p youtube-dl\n" \
    >> YTTODO
  echo youtube-dl -f "\"bestvideo[height<=?720,ext=mp4]+bestaudio[ext=m4a]"\" \
                  -o "\"%(uploader).10s-%(title).60s-%(id)s.%(ext)s"\"  \
                  "$@" >> YTTODO
  chmod +x YTTODO
}

## use nixpkgs form git
alias nsg='nix-shell -I nixpkgs="https://github.com/NixOS/nixpkgs/archive/master.tar.gz"'
alias nbg='nix-build -I nixpkgs="https://github.com/NixOS/nixpkgs/archive/master.tar.gz"'

# nix-shell with presets
alias nshs='nix-shell -p myHaskellEnv'
alias nspy='nix-shell -p myPythonEnv'

# ssh term is xterm
alias ssh='TERM=xterm ssh'

# manually export ghc configuration if shell have ghc
function ghc_exports {
  local GHC_BIN
  GHC_BIN=$(command -v ghc)
  if [[ -z $GHC_BIN ]]; then
    echo "No ghc avaliable"
    return 1
  fi

  local EXPRS
  EXPRS=$(grep -E ^export "$GHC_BIN")
  echo "$EXPRS"
  eval "$EXPRS"
}

# auto export ghc configuration if shell have ghc (only with new bash instance)
if [[ -n $(command -v ghc) ]]; then
  # command -v ghc
  eval "$(grep -E ^export "$(type -p ghc)")"
fi

# limit ghci memory usage to prevent freezing
# alias ghci='ghci +RTS -M1000m -K1000m -RTS'

# # limit haskell binary memory consumption
# export GHCRTS='-M1G'

# commonly typos
alias tmxu='tmux'

# sos for python
function sospy {
  echo "watching $1"
  sos -p "$1" -c "clear && python $1"
}
# with input
function sospyi {
  echo "watching $1 with input $2"
  sos -p "$1" -c "clear && python $1 < $2"
}

# sos for haskell
function soshs {
  echo "watching $1"
  sos -p "$1" -c "clear && runhaskell $1"
}
# with input
function soshsi {
  echo "watching $1 with input $2"
  sos -p "$1" -c "clear && runhaskell $1 < $2"
}

# tail -f with no line wraping
function tail_nw {
  echo "watching $1"
  setterm -linewrap off
  tail -f "$1"
  setterm -linewrap on
}

#
# VAR envs for interactive loging shell
#

# nvim as default editor
export EDITOR=nvim

# colourize grep matched
export GREP_COLOR='1;32'
alias grep='grep --color=auto'

# magic-space (!!)/(!-n) expand using spacebar
# ex: $ ls
#     $ !!<SPACE> --> ls
bind Space:magic-space

# nub histories (no duplicate, no space)
export HISTCONTROL=ignoreboth:erasedups

#
# Exports envs for every programs
#
# export TERM=screen-256color
export TERM=xterm-256color

# ranger ignore default rc
export RANGER_LOAD_DEFAULT_RC=FALSE

# timezone
export TZ='Asia/Bangkok'

# git prompt
GIT_PROMPT_SH=/run/current-system/sw/etc/bash_completion.d/git-prompt.sh
#GIT_PROMPT_SH=/etc/profiles/per-user/wizzup/etc/bash_completion.d/git-prompt.sh
[[ -f $GIT_PROMPT_SH ]] && source $GIT_PROMPT_SH && unset GIT_PROMPT_SH
export PS1='[\u@ \W]$(__git_ps1 "(%s)")$ '

# XDG
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"

# suppress GTK accessibility warning
export NO_AT_BRIDGE=1

# beep via speaker
function _beep {
  (speaker-test --frequency $1 --test sine >/dev/null)&
  _pid=$!
  sleep 0.${2}s
  kill -9 $_pid
}

alias beep='_beep 400 200'
